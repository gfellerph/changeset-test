name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        id: store
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: status
        run: pnpm changeset status --verbose

      - name: Check if version has changed
        id: check # This will be the reference for getting the outputs.
        uses: EndBug/version-check@v2 # You can choose the version/branch you prefer.
        with:
          file-name: ./packages/p1/package.json
          diff-search: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Find Package.json Files
        id: find-files
        run: |
          echo "::set-output name=files::$(find . -name 'package.json' -not -path '*/node_modules/*' -not -path '.' -type f)"

      - name: Check Version Numbers
        id: check-versions
        run: |
          for file in ${{ steps.find-files.outputs.files }}; do
            version=$(jq -r '.version' "$file")
            if [[ $version =~ \.0\.0$ ]]; then
              echo "Version number in $file matches the pattern '*.0.0'"
              echo "::set-output name=version_match::true"
              exit 0
            fi
          done

      - name: Set Output
        if: steps.check-versions.outputs.version_match == 'true'
        run: echo "Found a major change"

      - name: Log when changed
        if: steps.check.outputs.changed == 'true'
        run: 'echo "Version change found in commit ${{ steps.check.outputs.commit }}! New version: ${{ steps.check.outputs.version }} (${{ steps.check.outputs.type }})"'

      - name: Create Release Pull Request
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
